<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: octopress | 電気羊の執務室]]></title>
  <link href="http://satrex.github.com/blog/categories/octopress/atom.xml" rel="self"/>
  <link href="http://satrex.github.com/"/>
  <updated>2017-12-18T12:40:52+09:00</updated>
  <id>http://satrex.github.com/</id>
  <author>
    <name><![CDATA[satrex]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[はてブが表示されないなぁ]]></title>
    <link href="http://satrex.github.com/blog/2012/05/11/hatena_never_appears/"/>
    <updated>2012-05-11T07:09:00+09:00</updated>
    <id>http://satrex.github.com/blog/2012/05/11/hatena_never_appears</id>
    <content type="html"><![CDATA[<p><a href="tokkonopapa.github.com/blog/2011/12/31/hatena-bookmark-on-octopress/">T.I.D</a>さんの記事を見ながら、<br/>
このブログにはてブボタンを設置しようとしています。</p>

<p>ブックマークされる事は書けないかも知れませんが、何事も勉強です。</p>

<h2>どううまく行かないか</h2>

<p>はてブボタンの領域は確保してありそうなのですが、表示がうまくいっていないようです。</p>

<p><img src="https://img.skitch.com/20120511-mibj9s3y2ijm21iasjsjcs8i5k.gif" alt="はてブボタンがある？？" /></p>

<h2>やったこと</h2>

<p>記事をもとに、あれこれとテンプレートを変更しました。
本当は一部始終を書かないといけないのですが、面倒で書けません。</p>

<p><img src="https://img.skitch.com/20120512-x7w4ykj5if64f8sd1w1yx9pswg.gif" alt="Sharing.htmlの中身" /></p>

<p>後でじっくりやります。
いまは嫁にホットケーキを焼いてあげないと・・・</p>

<h2>参考資料</h2>

<p><a href="tokkonopapa.github.com/blog/2011/12/31/hatena-bookmark-on-octopress/">Octopressにはてブボタンを設置する - T.I.D.</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[bitbucketへ引っ越してみた]]></title>
    <link href="http://satrex.github.com/blog/2012/05/08/moving_to_bitbucket/"/>
    <updated>2012-05-08T20:59:00+09:00</updated>
    <id>http://satrex.github.com/blog/2012/05/08/moving_to_bitbucket</id>
    <content type="html"><![CDATA[<p>ブログのリポジトリを、githubからbitbucketへ移してみました。
だんだんGitの使い方に習熟してきたので、楽になってきました。</p>

<h2>下書きモード</h2>

<p>octopressの取り扱いに慣れるため、published=falseの下書きモードを使ってみています。
記事のヘッダーのpublished:をfalseに設定することで、その記事は下書きとなります。
ローカルでプレビューすることができるのはpublish:trueの時と同じですが、リポジトリにpushしても非公開になっているところが違います。</p>

<h2>使い道について考えてみた</h2>

<p>ローカルのプレビューができれば、下書きモードのpushはあまり恩恵がないような気がしますが・・・
どんな時に便利なんでしょうか。</p>

<p>タイマーで予約投稿ができれば便利な気がします。</p>

<h2>その後</h2>

<p>結局、bitbucketは記事のソースだけを管理することにし、
記事はgithub pagesを使う事にしました。</p>

<p>理由は、bitbucketは<strong>CNAMEが有料オプション</strong>だからです。
画像はSkitchに置くことにし、Skitchから効率よくMarkdownに書けるように
工夫します。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressのインストール（前編）]]></title>
    <link href="http://satrex.github.com/blog/2012/04/23/installed-octopress-001/"/>
    <updated>2012-04-23T12:47:00+09:00</updated>
    <id>http://satrex.github.com/blog/2012/04/23/installed-octopress-001</id>
    <content type="html"><![CDATA[<p>OctopressとGitでブログを作ろう、と思い立ってから１週間。<br/>
試行錯誤の末に、ようやくブログが上げられたので、ハマったポイントを紹介してみたいと思います。</p>

<p>インストール環境は、mac OSX Lion + zsh。Xcodeは入ってるところからスタートしました。<br/>
記事内で、ちらっとUbuntuでのインストールにも触れます。関係ない人はスルーで。</p>

<p><img src="https://www.evernote.com/shard/s75/sh/1c5fcc0f-7c94-45ba-9f7d-c9c6909bdfb6/a28bb5b09a4b9d7cc11c78e691395ddd/res/0e3d3046-3527-4e16-bc47-53ff68a3a9df/mac_ball-20120423-205850.jpg.jpg" alt="Octocatに似たデザインのmac" /></p>

<h2>Octopress導入まで</h2>

<p>あまり何もないところから、Octopressを導入するところまでの
手順を、ここにまとめてみます。<br/>
大まかに、Octopressインストールまでには、以下のものが必要です。</p>

<ol>
<li>Ruby 1.9.2以上（1.9.2そのものがおすすめ）</li>
<li>Git</li>
</ol>


<p>オイラのMacに入っていたRubyは1.8.7だったので、<br/>
Ruby-1.9.2を別途入れる必要がありました。
コマンドラインで<code>ruby --version</code>と入力して、"1.9.2"と表示されなかった方は、RVMを入れる必要があります。</p>

<h2>Rubyのインストール準備</h2>

<p> <a href="http://octopress.org/docs/setup/">Octopress公式サイト</a>では、RVMかrbenvで、Rubyをバージョン管理することを勧めています。<br/>
ここでは、RVMを使って進めます。</p>

<p>突然ですが、質問です。<br/>
あなたのOSはMacですか？<br/>
Yesの方は、RVMのインストールに進んで下さい。<br/>
Noの方。Linuxをお使いで、Curlが入っていない方は、Curlをインストールしないといけません。</p>

<h3>Curlのインストール</h3>

<p>Ubuntuの場合は、以下のコマンドでcURLをインストールします。
<code>sudo apt-get install libcurl-dev</code>
以上。</p>

<h3 id="rvm_install">RVMのインストール</h3>


<p>次に、どなたさまもこのコマンドを、ターミナルで実行します。ディレクトリは、初期状態で構いません。
<code>bash -s stable &lt; &lt;(curl -s https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer)</code></p>

<p>ここから、シェルに何を使っているかで、二手に分かれます。<br/>
何のことかわからない方は、最初の道を選んでください。あなたはbash組です。</p>

<hr />

<h4>1. bashを使っている方、何のこと？の方</h4>

<p>以下のコードを、ターミナルで実行します。</p>

<pre><code>echo '[[ -s "$HOME/.rvm/scripts/rvm" ]] &amp;&amp; . "$HOME/.rvm/scripts/rvm" # Load RVM function' &gt;&gt; ~/.bash_profile
source ~/.bash_profile
</code></pre>

<h4>2. zshを使っている方</h4>

<p>オイラも、今回を機にzshデビューしました。このコードをどうぞ。</p>

<pre><code>echo '[[ -s $HOME/.rvm/scripts/rvm ]] &amp;&amp; source $HOME/.rvm/scripts/rvm' &gt;&gt; ~/.zshrc
source ~/.zshrc`
</code></pre>

<hr />

<p>これで、Rubyを入れる準備ができました。まだ先は長いです。<br/>
でもげっそりしないで下さいね。<br/>
ひとつひとつは大した事じゃないです。うまくいけば・・・</p>

<h3 id="gcc_install">GCCのインストール </h3>


<p>オイラがインストールを試した中で、一番のポイントは、このGCCでした。<br/>
公式サイトにも載ってない落とし穴なので、注意して読んで下さい。<br/>
シチュエーション別に解説します。</p>

<hr />

<h4>1. Macの方</h4>

<p>また質問ですが、あなたのOSはLionですか？ <br/>
Noの方は、ここでは何もしなくていいです。RVMのインストールに進みます。</p>

<p>Yesの方は、ここ（→<a href="https://github.com/downloads/kennethreitz/osx-gcc-installer/GCC-10.7-v2.pkg">GCC-10.7.pkg</a> ）からインストーラをダウンロードして実行します。</p>

<p>そして環境変数CCをシェルのプロファイルに書き込みます。<br/>
例によって、どちらのシェルを使っているかで、手順が分かれます。</p>

<hr />

<h4>bashの方＋なんだか分からない方</h4>

<p><code>export CC=/usr/bin/gcc-4.2</code>を、~/.bash_profileに追記し（ファイルがなければ作る）、ターミナルを再起動します。<br/>
こんなふうにコマンドで打つと、勝手にファイルを開くか作って書いてくれます。</p>

<pre><code>echo "export CC=/usr/bin/gcc-4.2" &gt;&gt; ~/.bash_profile
</code></pre>

<h5>zshの方</h5>

<p>zshの方は、ファイル名が違います。<br/>
<code>export CC=/usr/bin/gcc-4.2</code>を、<code>~/.zprofile</code>に追記してください。</p>

<h5>参考資料：</h5>

<p><a href="http://d.hatena.ne.jp/holypp/20120212/1328992440">MacOSX LionでのRubyの扱い方、またはllvm-gccについて</a><br/>
<a href="https://gist.github.com/1104557">FIX for Lion's posix_spawn_ext.bundle: [BUG] Segmentation fault</a></p>

<hr />

<h4>Ubuntuの方</h4>

<p>UbuntuではGCCが入ってないので、build-essentialというライブラリをapt-getして下さい。<br/>
詳しくはリンク先：thincaさんのページを参照。</p>

<h5>参考資料：</h5>

<p><a href="http://thira.plavox.info/blog/2008/10/ubuntu_gcc_buildessential.html">Ubuntu のデフォルトでは gcc でコンパイルできないので build-essential を入れておく</a></p>

<p>詳しくないので、その他のディストリビューションの事はわかりません。</p>

<hr />

<h2>Rubyのインストール</h2>

<p>やっとここまで来ました。
ここからは、手順としてはもう少しです。
PCに頑張ってもらう感じになります。</p>

<p>Rubyをインストールします。
今回必要なライブラリは1.9.2です。
新し過ぎても面倒がある感じなので、スバリ1.9.2そのものをおすすめします。</p>

<pre><code>rvm install 1.9.2 &amp;&amp; rvm use 1.9.2
rvm rubygems latest
</code></pre>

<p>このコマンドで、Rubyのソースコードをダウンロードしながら、<br/>
自動的にコンパイルします。ここでさっきのGCCを使うんです。<br/>
けっこう時間がかかります。</p>

<h2>Gitのインストール</h2>

<p>Gitのインストールは、<code>brew install git</code>とかやってください。
Ubuntuの方は、<code>sudo apt-get install git-core</code>です。</p>

<h5>参考資料：</h5>

<p><a href="http://d.hatena.ne.jp/STAR_ZERO/20110815/1313416152">MacにHomebrewをインストールする（ついでにGitも</a>
<a href="http://blog.champierre.com/670">せっかちな人のための git 入門 – githubt をインストールし、共同で開発できる環境を整えるまで : 僕は発展途上技術者</a>
<a href="http://weble.org/2011/02/14/git-mac-install">最速で Git を Mac にインストールして基本的なコマンドを使う方法</a></p>

<hr />

<h2>次回</h2>

<p><a href="http://satrex.github.com/blog/2012/04/23/installed-octopress-002/">次回</a>は、いよいよOctopressをインストールします。</p>
]]></content>
  </entry>
  
</feed>
