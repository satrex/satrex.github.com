<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: DevOps | 電気羊の執務室]]></title>
  <link href="http://blog.satrex.jp/blog/categories/devops/atom.xml" rel="self"/>
  <link href="http://blog.satrex.jp/"/>
  <updated>2014-06-25T19:15:06+09:00</updated>
  <id>http://blog.satrex.jp/</id>
  <author>
    <name><![CDATA[satrex]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[dev_ops_tools]]></title>
    <link href="http://blog.satrex.jp/blog/2014/06/25/dev_ops_tools/"/>
    <updated>2014-06-25T10:32:00+09:00</updated>
    <id>http://blog.satrex.jp/blog/2014/06/25/dev_ops_tools</id>
    <content type="html"><![CDATA[<h2>はじめに</h2>

<p>３月から、仮想マシン構築を自動化しようとして、
色々もがいてみました。
早いもので、もう３ヶ月も経つんですね。</p>

<p>当初、いろいろ疑問が多かった中で、
『情報が少ないので、とにかく触って掴もう』
というアプローチでやってきました。</p>

<p>ある程度わかってきたので、まとめていこうと思います。</p>

<h2>DevOpsツールについて</h2>

<p>仮想マシン構築の自動化など、コード化されたインフラを、
DevOpsと呼ぶようですね。</p>

<p>これをやるのに、よくおすすめされる構成が、
Vagrant+Chef+BerkshelfでVirtualBoxノードを作ろう！
ですね。</p>

<p>参考資料：
あとでまとめる</p>

<h2>Packer,Vagrant,Chef,Berkshelfの違いは？</h2>

<p>記事を読みながら、何がなんだかよく分からなかったのが、
各ツールの違いです。</p>

<p>ここでは、各ツールの違いをまとめてみます。
うまく伝わるかはわかりませんが・・・</p>

<h2>Packer:無から仮想マシンファイルを作る</h2>

<p>Packerは、OSイメージや既存の仮想マシンの『ファイル』から、
boxや仮想マシンノードの『ファイル』を作るアプリ。</p>

<p>設定ファイル：
&ndash; 入力ファイル(OSのISOファイル、仮想マシンのファイル)
&ndash; 設定用jsonファイル(OS,バージョンごとに用意)
実行対象：ローカルマシン、クラウドサービス
出力：ファイル(vagrant用boxファイル、仮想マシンのファイル)</p>

<h2>Vagrant:仮想マシンを実行・廃棄する</h2>

<p>Vagrantは、仮想マシンのひな形（boxと呼ばれる）から、
実際に動く仮想マシン（ノードと呼ばれる）を作るアプリ。
実行した際に、マシンが動作を開始するのが特徴。</p>

<p>設定ファイル：
 &ndash; boxファイル
 &ndash; Vagrantfile(各ノードの設定内容を記述)
実行対象：ローカルマシン、クラウドサービス
出力：
&ndash; 実行中の仮想マシン
&ndash; ファイル(packageコマンドを使用したとき)</p>

<p>PackerとVagrantの最大の違い。
Packerは仮想マシンのファイルセットを作るが、
実行まではしないこと。
Vagrantは、仮想マシンの起動・終了など、
マシンを実行すること。</p>

<h2>Chef:実行中のマシンに設定を行う</h2>

<p>Chefは、実行中の仮想マシンや物理マシンに対し、
インストールや環境設定作業を自動化するアプリ。</p>

<p>Cookbookと呼ばれるパッケージを指定すると、
OSの差異をChefが吸収し、OSに適したコマンドで
プロビジョン(環境設定や、アプリのインストールなど)してくれる。</p>

<p>設定対象のマシンは、仮想マシンでも物理マシンでもOKだし、
ローカルでもリモートでもOK。</p>

<p>設定ファイル:
Chefリポジトリ(kitchenとも呼ばれるファイルセット)
&ndash; kitchen(ここでは一部のみ)
  &ndash; cookbooks(各設定内容をアプリごと、ジャンルごとにまとめておく)
  &ndash; nodes(設定対象のノードと、そのノードにどんな設定を行うかを記述)
実行対象：実行中のマシン
出力：実行中のマシンに設定が完了した状態</p>

<h3>chef-soloとknife-solo</h3>

<p>ローカルの場合は<code>chef solo</code>、リモートの場合は<code>knife solo</code>の
コマンドで設定を行う。</p>

<h2>Berkshelf:ChefのCookbook管理を便利にする</h2>

<p>Chefを使う際、Berkshelfを併用することで、
Cookbookの管理が便利になる（RubyのGemのようなもの）</p>

<p>設定ファイル：Berksfile
実行対象：Chefリポジトリ(=kitchen)
出力：整理済のChefリポジトリ</p>
]]></content>
  </entry>
  
</feed>
