<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[電気羊の執務室]]></title>
  <link href="http://satrex.github.com/atom.xml" rel="self"/>
  <link href="http://satrex.github.com/"/>
  <updated>2012-06-20T23:30:00+09:00</updated>
  <id>http://satrex.github.com/</id>
  <author>
    <name><![CDATA[satrex]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[さくらのレンタルサーバーにgitをインストールした]]></title>
    <link href="http://satrex.github.com/blog/2012/06/20/sakura-git-installed/"/>
    <updated>2012-06-20T19:29:00+09:00</updated>
    <id>http://satrex.github.com/blog/2012/06/20/sakura-git-installed</id>
    <content type="html"><![CDATA[<p><a href="http://blog.satrex.jp/blog/2012/06/20/sakura_start/">前回の記事</a>では、さくらのレンタルサーバーにGitを入れようとして失敗しました。
今回は、その解決法を書きます。</p>

<h2>解決法</h2>

<p>パッケージ管理システム経由では入らないようなので、ソースをコンパイルして直接インストールしてしまう事にしました。</p>

<p>gitのtarballからコンパイルしてインストールします。</p>

<pre><code>mkdir gitinstall  
cd gitinstall  
wget https://github.com/git/git/tarball/v1.7.11-rc3 --no-check-certificate
tar xjvf git-1.7.3.5.tar.bz2
.cd git-1.7.3.5
./configure -prefix=$HOME/local
gmake
vi Makefile
# prefix = $(HOME)/local  を記述
gmake install
</code></pre>

<p>これで、~/local/binにgitがインストールされます。
Makefileを変更しないと、~/binに入ってしまい、具合が悪いようです。</p>

<h2>パスを通す</h2>

<p>最後に、パスを通します。</p>

<pre><code>vi ~/.cshrc
</code></pre>

<p>set path=( で始まる行を見つけ、括弧の中に、以下を追加します。</p>

<pre><code>/$HOME/local/bin
</code></pre>

<p>直前の文字と、スペースを挟んで区切るのを忘れないでください。
これで、gitにパスが通り、which gitが成功するはずです。
光へ続く道が開かれました。</p>

<h3>参考文献</h3>

<p><a href="http://noumenon-th.net/text-hymn/2011/01/git.php">さくらのレンタルサーバーにGitをインストールする方法</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[さくらのレンタルサーバーを借りた]]></title>
    <link href="http://satrex.github.com/blog/2012/06/20/sakura_start/"/>
    <updated>2012-06-20T05:09:00+09:00</updated>
    <id>http://satrex.github.com/blog/2012/06/20/sakura_start</id>
    <content type="html"><![CDATA[<p>Webサイトを作るため、サーバーを借りてみたくなったsatrexです。</p>

<h2>さくらのレンタルサーバー対VPS</h2>

<p>さて、さくらのレンタルサーバーとさくらのVPSで迷いました。<br/>
メリット・デメリットを比較すると、おおむね以下のようになりました。</p>

<hr />

<h3>レンタルサーバー</h3>

<ul>
<li>メリット：

<ul>
<li>セキュリティがしっかりしている</li>
<li>設定がめんどくさくない</li>
<li>ちょっと安い</li>
</ul>
</li>
<li>デメリット：

<ul>
<li>自由度が低い</li>
<li>OSを選べない</li>
<li>ディスク容量が少ない（10G）</li>
</ul>
</li>
</ul>


<hr />

<h3>VPS</h3>

<ul>
<li>メリット：

<ul>
<li>自由度が高い</li>
<li>OSを選べる</li>
<li>ディスク容量が多い（100G〜）</li>
</ul>
</li>
<li>デメリット：

<ul>
<li>セキュリティは自分で設定(やや不安)</li>
<li>いろいろと設定しないと</li>
<li>ちょっと高い</li>
</ul>
</li>
</ul>


<hr />

<p>コストはたいした問題ではありません。<br/>
月500円が1000円でも似たようなもんです。</p>

<h3>まずはレンタルサーバー</h3>

<p>迷ったらとりあえずミニマルな選択肢を試します。<br/>
レンタルサーバーを仮登録してみました。</p>

<p>そこで感じたことをレポします。</p>

<h3>sshログイン</h3>

<p>サーバー屋さんが数多くある中で、
さくらのレンタルサーバーを選んだのは、
sshログインできるからです。<br/>
WordPressとか、GUIだけでメンテするのはしんどそうです。</p>

<h2>さっそくログインしてみた</h2>

<p>サーバーのパスワードが書かれたメールが
見当たらず、サポートにメールを送った朝7時でした。</p>

<p>昼の13時ごろにはメールの再送を受けられ、
無事にログインはできました。</p>

<p>しかし、新たな問題の幕開けに、そのころのオイラは気づいていなかったのです。</p>

<h2>Gitが入らない</h2>

<p>次に欲しいのはGitです。
これがあれば、ローカルの仮想マシンと同期できます。<br/>
仮想マシンでコンテンツを作り、
Pushしておき、レンタルサーバーからPullすれば、
電車の中でもWebが作れるというものです。</p>

<p>さっそく、gitをインストールする手段を講じました。</p>

<h3>Portsの憂鬱</h3>

<p>FreeBSDのパッケージ管理は、Portsで行うようです。<br/>
さっそくtarボールをダウンロードしました。<br/>
解凍しますが・・・</p>

<pre><code>%tar -x ports.tar
tar: Error opening archive: Failed to open '/dev/sa0'
</code></pre>

<p>当然ですがroot権限がないため、
Portsが入れられません。</p>

<h3>pkgの挫折</h3>

<p>Portsがダメならpkgです。
pkgは、WordPressをインストールするために、すでにインストールされているようです。</p>

<p>さっそくこれを使ってみますが・・・
パッケージのインストールを認めてくれません。</p>

<p><span style='text-decoration:line-through'>とりあえずの結論です。<br/>
<strong>Git使いは、ちょっといいプランを借りないとだめ</strong><br/>
お試し期間中なのでキャンセルし、プランを見直そうと思います。  </span></p>

<p>パッケージ管理をあきらめ、ソースコードからgitをコンパイルしてインストールすることにしました。</p>

<p><a href="http://blog.satrex.dev/blog/2012/06/20/sakura-git-installed">次の記事</a>で詳しく書きます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VimSketchUpをリリースしました]]></title>
    <link href="http://satrex.github.com/blog/2012/06/04/vimsketchup/"/>
    <updated>2012-06-04T00:38:00+09:00</updated>
    <id>http://satrex.github.com/blog/2012/06/04/vimsketchup</id>
    <content type="html"><![CDATA[<p>VimでSketchUpのRubyスクリプトを書きたい方に朗報です。
VimでSketchUpRubyを実行できるプラグインをリリースしました。</p>

<h2>動作のイメージ</h2>

<p>例えば、スクリプトで三角形を描いてみます。
初めに、SketchUpを起動します。
これが初期画面。ちなみに、女の子の名前はサンちゃんです。</p>

<p><img src="https://img.skitch.com/20120603-bi3hcwd594ubauj132rkhkwk92.gif" alt="SketchUpの初期画面" /></p>

<p>何もないところに、Rubyスクリプトで三角形を描きます。
まず、VimでSketchUp用のスクリプトを書きます。</p>

<p><img src="https://img.skitch.com/20120603-e29j4n2sq9hk15mmfrqj461sib.gif" alt="VimでRubyスクリプトを書いたところ" /></p>

<p>そして、”￥sur”とキーボードで入力すると、
SketchUpの画面に変化が起きます。</p>

<p><img src="https://img.skitch.com/20120603-jmbeicj5qw2xp1rmujb42cqub.gif" alt="三角形が出たところ" /></p>

<p>三角形が描けました。</p>

<h2>GitHubに登録しました</h2>

<p>このスクリプトを、GitHubに登録しました。
リポジトリは<a href="https://github.com/satrex/VimSketchUpRuby">ここです</a>。</p>

<h2>これから</h2>

<p>インストールの仕方、初期設定など、
使い方に関する記事を書きます。</p>

<p>VimでSketchUpRubyが書けるようになったからには、
補完の支援を受けたり、SketchUpAPIのヘルプをローカルで
見たりできるようになりたいです。</p>

<p>Rubyの補完は弱いので限界はあるのですが、
現在はdictファイルを使って、補完に挑戦しています。</p>

<h2>感想</h2>

<p>前々から作りたいと言っていたプラグインです。
やっと完成を見ることができました。
長かったです。</p>

<p>相変わらず、VimScriptもSketchUpAPIも手探りですが、
困るのに慣れてきました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacでSketchUpのRubyスクリプトを自動実行]]></title>
    <link href="http://satrex.github.com/blog/2012/05/29/sketchup_activation/"/>
    <updated>2012-05-29T21:39:00+09:00</updated>
    <id>http://satrex.github.com/blog/2012/05/29/sketchup_activation</id>
    <content type="html"><![CDATA[<p>以前に書いていた、GoogleSketchUpのコードをVimから書けるプラグインを書いています。</p>

<p>Windowsでは、Bridgeという神アプリで、Eclipse上から
SketchUpを操作する事ができますが、macには対応しません。</p>

<h2>AppleScriptでなんとかしてみた</h2>

<p>そこで、macで実行中のSketchUpでRubyコードを実行できる
AppleScriptを書きました。</p>

<p>これをVimから実行することで、Vimで書いているRubyスクリプトを、
SketchUp上で実行する事ができるはずです。</p>

<p>Bridgeと比べると格段にしょぼい作りですが、
今までの面倒に比べれば天と地の差です。</p>

<h2>現状</h2>

<p>とりあえず、SketchUpが最前面に出て、Rubyコンソールが開き、
クリップボードの文字列をペーストするだけです。</p>

<p>Vim側はまだありません。</p>

<h2>次のアクション</h2>

<p>Vim側で、バッファの全文字列を取得する処理＋
このAppleScriptを呼び出す処理を書けば、
うまくいくかも知れません。</p>

<p>SketchUpスクリプトファイルのフォルダは込み入ったパスにあるので、
新規作成機能も欲しいです。</p>

<p>glidenoteさんのOctoEditorをForkして作ってみようかな・・・
と考えています。</p>

<h2>ソース</h2>

<script src="https://gist.github.com/2829474.js"> </script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Three.jsを試してみた]]></title>
    <link href="http://satrex.github.com/blog/2012/05/22/three_js_tutorial/"/>
    <updated>2012-05-22T19:50:00+09:00</updated>
    <id>http://satrex.github.com/blog/2012/05/22/three_js_tutorial</id>
    <content type="html"><![CDATA[<p><a href="http://kray.jp/blog/three-js/">krayさんのサイト</a>を丸写しで、Three.jsを試してみました。
うまくいったので、お礼かたがた書いてみます。</p>

<h3>うまくいったこと</h3>

<p>いくつか、これは助かったなぁと思う事を書いてみます。</p>

<h4>Three.jsの扱い</h4>

<p>まず<a href="https://github.com/mrdoob/three.js/">ソース</a>をCloneして、さてどう使うんだろうと考えちゃいました。
そうだ<a href="https://github.com/mrdoob/three.js/#readme">ReadMe</a>を見よう、という事で見てみると、minimize版をHTMLヘッダーで参照すればいいとのこと。</p>

<p><img src="https://img.skitch.com/20120522-xguus9rca1pn9eeps3ceygnrbn.gif" alt="３Dの立方体がぐりぐり動く" /></p>

<p>なるほど。
チュートリアルやwikiも充実してるようなので、しばらく入り浸ってみたいです。</p>

<h3>FireFoxのいいところ</h3>

<p>とくに他のブラウザと比較しての話ではないです。
cmd-uでソースの表示。そこからリンクを辿ってスクリプトなど見れるので、追いかけやすいなぁと。
強いて言えば、ソースにシンタックスハイライトしてくれれば最高です。</p>

<p>あと、３DでDOMツリーが見れるのが面白いです。</p>

<h2>うまくいかなかったこと</h2>

<p>逆に、これはまだよくわかってないぞ、という部分について。</p>

<h3>javascriptの補完</h3>

<p>neocomplcacheがないVimは使いません。というくらい、オイラは補完が好きです。
補完がないとコードが書きたくないです。
で、javascriptのシンタックスや、Three.js内のメソッド名など、持ってきてほしいものがいくつかありました。</p>

<p>あとでneocomplcacheのヘルプをよく読んでみます。</p>

<h3>SketchUpとThree.jsの連携</h3>

<p>SketchUpでモデリングして、Webサイトに載せてぐりぐり動かす、とかできると最高です。</p>

<p>SketchUpはWindows版だとBridgeというライブラリでEclipseからスクリプトが実行できるのですが、いかんせんmacではBridgeが通用せず。
まだレベルが足りなくて、Bridgeを移植しようにも、どう手をつけていいのかわかりません。</p>

<p>VimからSketchUpのRubyコンソールのウィンドウハンドルを取って、文字を入力してExecuteScriptコマンドを流せばいいはずです。</p>

<p>でもどうすればそれができるか分かりません。
ざんねん。
いつかは！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[はてブが表示されないなぁ]]></title>
    <link href="http://satrex.github.com/blog/2012/05/11/hatena_never_appears/"/>
    <updated>2012-05-11T07:09:00+09:00</updated>
    <id>http://satrex.github.com/blog/2012/05/11/hatena_never_appears</id>
    <content type="html"><![CDATA[<p><a href="tokkonopapa.github.com/blog/2011/12/31/hatena-bookmark-on-octopress/">T.I.D</a>さんの記事を見ながら、<br/>
このブログにはてブボタンを設置しようとしています。</p>

<p>ブックマークされる事は書けないかも知れませんが、何事も勉強です。</p>

<h2>どううまく行かないか</h2>

<p>はてブボタンの領域は確保してありそうなのですが、表示がうまくいっていないようです。</p>

<p><img src="https://img.skitch.com/20120511-mibj9s3y2ijm21iasjsjcs8i5k.gif" alt="はてブボタンがある？？" /></p>

<h2>やったこと</h2>

<p>記事をもとに、あれこれとテンプレートを変更しました。
本当は一部始終を書かないといけないのですが、面倒で書けません。</p>

<p><img src="https://img.skitch.com/20120512-x7w4ykj5if64f8sd1w1yx9pswg.gif" alt="Sharing.htmlの中身" /></p>

<p>後でじっくりやります。
いまは嫁にホットケーキを焼いてあげないと・・・</p>

<h2>参考資料</h2>

<p><a href="tokkonopapa.github.com/blog/2011/12/31/hatena-bookmark-on-octopress/">Octopressにはてブボタンを設置する - T.I.D.</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[bitbucketへ引っ越してみた]]></title>
    <link href="http://satrex.github.com/blog/2012/05/08/moving_to_bitbucket/"/>
    <updated>2012-05-08T20:59:00+09:00</updated>
    <id>http://satrex.github.com/blog/2012/05/08/moving_to_bitbucket</id>
    <content type="html"><![CDATA[<p>ブログのリポジトリを、githubからbitbucketへ移してみました。
だんだんGitの使い方に習熟してきたので、楽になってきました。</p>

<h2>下書きモード</h2>

<p>octopressの取り扱いに慣れるため、published=falseの下書きモードを使ってみています。
記事のヘッダーのpublished:をfalseに設定することで、その記事は下書きとなります。
ローカルでプレビューすることができるのはpublish:trueの時と同じですが、リポジトリにpushしても非公開になっているところが違います。</p>

<h2>使い道について考えてみた</h2>

<p>ローカルのプレビューができれば、下書きモードのpushはあまり恩恵がないような気がしますが・・・
どんな時に便利なんでしょうか。</p>

<p>タイマーで予約投稿ができれば便利な気がします。</p>

<h2>その後</h2>

<p>結局、bitbucketは記事のソースだけを管理することにし、
記事はgithub pagesを使う事にしました。</p>

<p>理由は、bitbucketは<strong>CNAMEが有料オプション</strong>だからです。
画像はSkitchに置くことにし、Skitchから効率よくMarkdownに書けるように
工夫します。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[これからやりたいこと]]></title>
    <link href="http://satrex.github.com/blog/2012/05/06/todo/"/>
    <updated>2012-05-06T06:41:00+09:00</updated>
    <id>http://satrex.github.com/blog/2012/05/06/todo</id>
    <content type="html"><![CDATA[<p>ブログのデザインが終わったので、これからやりたいことを整理します。
まず、<a href="http://satrex.github.com/blog/2012/04/27/task_remain/">前回のTODOリスト</a>を確認します。</p>

<ol>
<li><p>ブログのデザインを変更する</p>

<ul>
<li>トップページの画像を作る → 完了</li>
<li>スタイル（sass）を設定する → 完了</li>
<li>はてブとか入れる → 未完</li>
</ul>
</li>
<li><p>Skitchの画像管理を楽にする</p>

<ul>
<li>Skitchで編集した画像が、Octopress配下にコピーされる仕組みを構築する → やめた</li>
</ul>
</li>
<li><p>LokkaでCSSとjavascriptの勉強をする → 未着手</p>

<ul>
<li>よくColissとかに載ってるサンプルを、実際に書いてみたい</li>
</ul>
</li>
</ol>


<h2>ふりかえり</h2>

<h3>ブログのデザイン</h3>

<p>整理してみたら、ブログのデザインは終わってなかった事が分かりました。
僕は阿呆ですね。</p>

<p>はてブボタンやら、ブックマーク数が表示される仕組みを入れるつもりでした。</p>

<h3>Skitchの画像管理について</h3>

<p>まず、Octopressフォルダ内で画像を管理するのを一旦やめ、Skitchのサイトにアップロードしてます。<br/>
GitHubの無料アカウント容量が300MBしかないので、画像の管理に向きません。</p>

<p>GitHubからBitBucketにリポジトリを変える事を検討します。
最終的には、最速でブログが書ける環境になれればいいです。</p>

<h2>いま考えていること</h2>

<h3>画像管理の方法</h3>

<p>Octopressフォルダ内のsource/images配下で画像が管理できれば、次のような事ができるのかも知れません。</p>

<ul>
<li>新しい記事を生成する時、当日のimagesフォルダの中身を、記事の末尾に自動記述する。</li>
</ul>


<p>これを実現するのには、OctoEditorをカスタマイズする必要がありそうです。</p>

<p>Skitchから画像を保存する手順を高速化する必要があります。画像をローカルで管理する場合、検討したいのは、次のような作戦です。</p>

<ul>
<li>Skitchから最速でエクスポートできるよう、当日の画像フォルダは自動的に作る。</li>
<li>前日までの画像フォルダで、空のものは自動的に削除する。</li>
</ul>


<p>画像をローカルで管理するには、無料で容量無制限のBitBucketが必須です。
いまは二の足を踏んでますが、BitBucketをちょっと使ってみます。</p>

<h3>Gistを使ってみる</h3>

<p>よく見かける、行番号の入ったかっこいいコード、あれはGistで実現するのだという事は、知識として知っています。</p>

<p>これからは、自分もGistを使ってコードをかっこよく載せたいものです。</p>

<h2>新しいTODO</h2>

<ol>
<li><p>ブログのデザインを変更する</p>

<ul>
<li>はてブとか入れる</li>
</ul>
</li>
<li><p>Skitchの画像管理を楽にする</p>

<ul>
<li>BitBucketを使ってみる</li>
<li>当日の画像フォルダ自動生成</li>
<li>当日の画像を記事に自動挿入</li>
</ul>
</li>
<li><p>LokkaでCSSとjavascriptの勉強をする → 当面保留</p>

<ul>
<li>よくColissとかに載ってるサンプルを、実際に書いてみたい</li>
</ul>
</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[デザイン変えてみた]]></title>
    <link href="http://satrex.github.com/blog/2012/05/05/design_changed/"/>
    <updated>2012-05-05T22:14:00+09:00</updated>
    <id>http://satrex.github.com/blog/2012/05/05/design_changed</id>
    <content type="html"><![CDATA[<p>連休のまとまった時間を利用して、Octopressの勉強がてら、スタイルの設定をがっつりやってみました。
デフォルトのClassicテーマから、<a href="http://blog.glidenote.com/">GlideNote</a>風のデザインへ。</p>

<p>たぶん、細かい書式を使うとレイアウトが崩れると思うので、これから少しずつブラッシュアップしていければよいでしょう。</p>

<h2>感謝を込めて</h2>

<p>かなりの部分を参考にさせて頂いた<a href="http://twitter.com/glidenote">GlideNoteさん</a>に、感謝の意を表します。好き過ぎてパクっちゃいました★</p>

<p>そもそもOctopress、zshなど、GlideNoteさんの記事を読んでは、もろもろパクり倒してます。
本当にありがとうございます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vimの設定見直し中]]></title>
    <link href="http://satrex.github.com/blog/2012/05/01/vim_setting/"/>
    <updated>2012-05-01T22:43:00+09:00</updated>
    <id>http://satrex.github.com/blog/2012/05/01/vim_setting</id>
    <content type="html"><![CDATA[<p>vimの設定を見直しています。
最近zshを使うようになって、gvimのコマンドラインに不便を感じるので、
コマンドラインから起動するモードでも便利にやれたらいいなぁと思っています。</p>

<p>今の設定で行くと、いろいろと超えないといけない壁がある感じです。</p>

<h3>NeoComplCacheが使えない</h3>

<p>最大の問題は、NeoComplCacheがコマンドラインからは使えないこと。<br/>
rbファイルやHTMLファイルを編集しようとすると、
ファイルを開いた時か保存した時のどちらかに、猛烈な勢いでエラーを吐きまくります（詳細は画像参照）。</p>

<p>もう一点重大な問題として、日本語入力などの設定が、コマンドラインからのVimでは不便すぎます。</p>

<ul>
<li>IMEが全ての入力に優先している。<br/>
Vimのモード切替などは、日本語入力中でも、半角で受け付けてくれないと不便です。</li>
<li>Insertモードにすると、カーソルキーでカーソルが移動できない（A〜Dの入力で代替される）。
set nocompatibleと, imap ^[OA <Up>を試した結果、改善されないので諦めました。</li>
</ul>


<p>基本はGvimを立ち上げるが吉、で当面やってみようかと思います。
むしろGvimのコマンドラインがzshになってくれたら文句ないんですが、
Vimのコマンドでlessを使うたびに、『ターミナルの全機能が使えるなんて思うなよ』と言われてしまうので、
半ば諦めています。おわり。</p>

<h3>エラーメッセージの画像</h3>

<div class="thumbnail"><a href="https://skitch.com/sat-rex/8aqq2/tmux-114x44"><img style="max-width:638px" src="https://img.skitch.com/20120502-ep9y7r2mj68ey3rcgdmy2u86kj.medium.jpg" alt="tmux-114×44" /></a></div>


<div class="thumbnail"><a href="https://skitch.com/sat-rex/8axfu/tmux-114x44-1-3"><img style="max-width:638px" src="https://img.skitch.com/20120502-cb8ih2ksrnnfxk7bkgsujpk1ud.medium.jpg" alt="tmux-114×44-1-3" /></a></div>


<div class="thumbnail"><a href="https://skitch.com/sat-rex/8axrb/tmux-114x44-3"><img style="max-width:638px" src="https://img.skitch.com/20120502-tt6iku576gwk3sx96yeh32jspx.medium.jpg" alt="tmux-114×44-3" /></a></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[これからやりたいこと]]></title>
    <link href="http://satrex.github.com/blog/2012/04/27/task_remain/"/>
    <updated>2012-04-27T07:51:00+09:00</updated>
    <id>http://satrex.github.com/blog/2012/04/27/task_remain</id>
    <content type="html"><![CDATA[<p>ひととおりブログの形はできたので、<br/>
これからやりたいことをまとめて、優先順位を付けてみたいと思います。</p>

<ol>
<li><p>ブログのデザインを変更する</p>

<ul>
<li>トップページの画像を作る</li>
<li>スタイル（sass）を設定する</li>
<li>はてブとか入れる</li>
</ul>
</li>
<li><p>Skitchの画像管理を楽にする</p>

<ul>
<li>Skitchで編集した画像が、Octopress配下にコピーされる仕組みを構築する</li>
</ul>
</li>
<li>LokkaでCSSとjavascriptの勉強をする

<ul>
<li>よくColissとかに載ってるサンプルを、実際に書いてみたい</li>
</ul>
</li>
</ol>


<p>Octopressへの投稿じたい、まだまだ練習です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressのインストール（後編）]]></title>
    <link href="http://satrex.github.com/blog/2012/04/23/installed-octopress-002/"/>
    <updated>2012-04-23T23:05:00+09:00</updated>
    <id>http://satrex.github.com/blog/2012/04/23/installed-octopress-002</id>
    <content type="html"><![CDATA[<p><a href="http://satrex.github.com/blog/2012/04/23/installed-octopress-001/">前編</a>の続きです。</p>

<h2>Octopressのインストール</h2>

<p>いよいよOctopressをインストールしていきます。
公式サイトやGlideNoteさんの記事、またjedipunkzさんの記事が参考になります。</p>

<ul>
<li><a href="http://blog.glidenote.com/blog/2011/11/07/install-octopress-on-github/">GithubとOctopressでモダンな技術系ブログを作ってみる - GlideNote</a></li>
<li><a href="http://jedipunkz.github.com/blog/2012/03/20/github-dot-com-de-octopress-gou-zhu/">github.com で Octopress 構築 - jedipunkz</a></li>
</ul>


<p><img src="https://www.evernote.com/shard/s75/sh/1c5fcc0f-7c94-45ba-9f7d-c9c6909bdfb6/a28bb5b09a4b9d7cc11c78e691395ddd/res/0e3d3046-3527-4e16-bc47-53ff68a3a9df/mac_ball-20120423-205850.jpg.jpg" alt="Octocatに似たデザインのmac" /></p>

<h2>GithubPageの取得</h2>

<p><a href="https://github.com/new">Githubの新規プロジェクト画面</a>から、好きな名前でブログ用のリポジトリを作っておきます。</p>

<p><img src="https://img.skitch.com/20120424-nt9u7frxprtchkn31au43ewe4w.jpg" alt="Githubから、ブログ用のリポジトリを作る" /></p>

<h2>Octopressのインストールのイメージ</h2>

<p>Octopressのインストールがどんな感じかというと、<br/>
AppStoreでアプリを買うのとは、だいぶ趣きが違います。</p>

<p>すごく基本的なところから解説してみます。
Octopressは、『アプリケーション』フォルダに入るプログラムではありません。
ひとつのフォルダを作ってそこにインストールし、そのフォルダをブログの基地として使うイメージです。</p>

<p><img src="http://farm8.staticflickr.com/7274/7109487325_fc55531d8a.jpg" alt="1フォルダに、ツールと記事が同居します" /></p>

<h2>Octopressのインストール</h2>

<pre><code>mkdir ユーザー名.github.com  
cd  ユーザー名.github.com  
git clone git://github.com/imathis/octopress.git octopress  
cd octopress  
gem install bundler  
bundle install  
rake install # classic テーマのインストール
</code></pre>

<p>こんな感じで入れて下さい。
上の例だと、~/ユーザー名.github.com/octopress
のようになります。</p>

<p>別にアカウントごとにフォルダに分ける必要がなければ、
~/octopress/ のように構成しても問題ないです。
その場合は、上のコマンドの最初２つを飛ばします。</p>

<h2>Octopressの構成</h2>

<p>インストールしたOctopressのフォルダ構成と、動作のイメージを紹介します。</p>

<p><img src="https://www.evernote.com/shard/s75/sh/7d825d5b-1923-40c5-8d00-4237ff243e17/6bffbb3957614d2fa4438e7e0ccfa423/res/21ae89ae-4b24-4cf5-a03d-2fbc58a53742/octopress-20120423-154359.jpg.jpg" alt="_config.yamlは設定ファイル、sourceに記事やスタイルを記述、publicにhtmlとCSSが生成される" /></p>

<p>上の図で示すとおり、Octopressのフォルダ構成は、Octopressフォルダの中にいろいろある感じです。<br/>
コマンドラインで作業する時には、基本的にカレントディレクトリは『Octopress』フォルダです。</p>

<p>参考資料；
 <a href="http://burnsoft.github.com/blog/blog/2011/09/23/octopress-install-with-screencast/"> Octopressをインストールする動画 ： burnsoft </a><br/>
英語ですが、作業の流れがわかりやすいです。</p>

<h2>Octopressの初期設定</h2>

<p>Octopressの初期設定を行います。</p>

<pre><code>rake setup_github_pages
Enter the read/write url for your repository:
</code></pre>

<p>上で作成したGithub PagesのリポジトリURLを指定します。
オイラの場合だとこうです。</p>

<pre><code>git@github.com:satrex/satrex.github.com.git

rake generate
rake deploy
</code></pre>

<p>しばらくすると http://satrex.github.com/ にアクセス出来るようになります。</p>

<h3>_config.ymlの設定</h3>

<p>octopressフォルダにある、_config.ymlを変更し、ブログの設定を行います。</p>

<pre><code>url:                # For rewriting urls for RSS, etc
title:              # Used in the header and title tags
subtitle:           # A description used in the header
author:             # Your name, for RSS, Copyright, Metadata
simple_search:      # Search engine for simple site search
subscribe_rss:      # Url for your blog's feed, defauts to /atom.xml
subscribe_email:    # Url to subscribe by email (service required)
email:              # Email address for the RSS feed if you want it.
</code></pre>

<p>設定終了後は、<code>rake gen_deploy</code>でデプロイできます。</p>

<h2>記事の投稿</h2>

<p>ターミナルで、次のコマンドを実行します。</p>

<pre><code>rake new_post["title"]
rake new_post\["title"\] # zsh の場合
</code></pre>

<p>octopress/source/-postsフォルダに、『日付-title.markdown』のようなファイルが生成されます。
それを、好きなエディタで編集します。</p>

<p>Markdownという記法を使います。
オイラはVimでやっていますが、まったく予備知識がない場合は、<a href="http://www.bywordapp.com">Byword</a>というエディタをおすすめします。
Markdownのプレビュー機能が付いているので、書いた記事がどう見えるのか確認しやすいはずです。</p>

<h2>トラブルシューティング</h2>

<p>作業をしてて困った事を、ここにメモとして残しておきます。</p>

<h3>rake installで、バージョンエラーが出る</h3>

<p>お使いのPCに入っているrakeが新しすぎると起こるようです。
<a href="http://satrex.github.com/blog/2012Octopress_movie/04/23/installed-octopress-001/#rvm_install">RVMの設定やインストールを見直し</a>、バージョンを合わせます。
<code>bundle exec rake install</code>と表記すると回避できます。</p>

<h3>rake generateで、コンパイルエラーが出る</h3>

<p>posix-spawnなどのエラーに悩みました。
GCCの問題で起こるようです。
<a href="http://satrex.github.com/blog/2012/04/23/installed-octopress-001/#gcc_install">GCCのインストール</a>の項を見直してください。</p>

<h3>参考資料</h3>

<ul>
<li><a href="http://blog.glidenote.com/blog/2011/11/07/install-octopress-on-github/">GithubとOctopressでモダンな技術系ブログを作ってみる - GlideNote</a><br/>
Octopressインストール記事の草分けではないかと思います。</li>
<li><a href="http://jedipunkz.github.com/blog/2012/03/20/github-dot-com-de-octopress-gou-zhu/">github.com で Octopress 構築 - jedipunkz</a><br/>
Linuxを使ったインストールについてまとまっています。</li>
<li><a href="http://www.homux2.net/blog/blog/2012/03/30/blog-build/">Octopressでブログ構築 - あるふぁ世界線</a><br/>
どうしてOctopressを使うか、とかも書いてあって、参考になります。一読をお薦めします。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressのインストール（前編）]]></title>
    <link href="http://satrex.github.com/blog/2012/04/23/installed-octopress-001/"/>
    <updated>2012-04-23T12:47:00+09:00</updated>
    <id>http://satrex.github.com/blog/2012/04/23/installed-octopress-001</id>
    <content type="html"><![CDATA[<p>OctopressとGitでブログを作ろう、と思い立ってから１週間。<br/>
試行錯誤の末に、ようやくブログが上げられたので、ハマったポイントを紹介してみたいと思います。</p>

<p>インストール環境は、mac OSX Lion + zsh。Xcodeは入ってるところからスタートしました。<br/>
記事内で、ちらっとUbuntuでのインストールにも触れます。関係ない人はスルーで。</p>

<p><img src="https://www.evernote.com/shard/s75/sh/1c5fcc0f-7c94-45ba-9f7d-c9c6909bdfb6/a28bb5b09a4b9d7cc11c78e691395ddd/res/0e3d3046-3527-4e16-bc47-53ff68a3a9df/mac_ball-20120423-205850.jpg.jpg" alt="Octocatに似たデザインのmac" /></p>

<h2>Octopress導入まで</h2>

<p>あまり何もないところから、Octopressを導入するところまでの
手順を、ここにまとめてみます。<br/>
大まかに、Octopressインストールまでには、以下のものが必要です。</p>

<ol>
<li>Ruby 1.9.2以上（1.9.2そのものがおすすめ）</li>
<li>Git</li>
</ol>


<p>オイラのMacに入っていたRubyは1.8.7だったので、<br/>
Ruby-1.9.2を別途入れる必要がありました。
コマンドラインで<code>ruby --version</code>と入力して、&#8221;1.9.2&#8221;と表示されなかった方は、RVMを入れる必要があります。</p>

<h2>Rubyのインストール準備</h2>

<p> <a href="http://octopress.org/docs/setup/">Octopress公式サイト</a>では、RVMかrbenvで、Rubyをバージョン管理することを勧めています。<br/>
ここでは、RVMを使って進めます。</p>

<p>突然ですが、質問です。<br/>
あなたのOSはMacですか？<br/>
Yesの方は、RVMのインストールに進んで下さい。<br/>
Noの方。Linuxをお使いで、Curlが入っていない方は、Curlをインストールしないといけません。</p>

<h3>Curlのインストール</h3>

<p>Ubuntuの場合は、以下のコマンドでcURLをインストールします。
<code>sudo apt-get install libcurl-dev</code>
以上。</p>

<h3 id="rvm_install">RVMのインストール</h3>


<p>次に、どなたさまもこのコマンドを、ターミナルで実行します。ディレクトリは、初期状態で構いません。
<code>bash -s stable &lt; &lt;(curl -s https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer)</code></p>

<p>ここから、シェルに何を使っているかで、二手に分かれます。<br/>
何のことかわからない方は、最初の道を選んでください。あなたはbash組です。</p>

<hr />

<h4>1. bashを使っている方、何のこと？の方</h4>

<p>以下のコードを、ターミナルで実行します。</p>

<pre><code>echo '[[ -s "$HOME/.rvm/scripts/rvm" ]] &amp;&amp; . "$HOME/.rvm/scripts/rvm" # Load RVM function' &gt;&gt; ~/.bash_profile
source ~/.bash_profile
</code></pre>

<h4>2. zshを使っている方</h4>

<p>オイラも、今回を機にzshデビューしました。このコードをどうぞ。</p>

<pre><code>echo '[[ -s $HOME/.rvm/scripts/rvm ]] &amp;&amp; source $HOME/.rvm/scripts/rvm' &gt;&gt; ~/.zshrc
source ~/.zshrc`
</code></pre>

<hr />

<p>これで、Rubyを入れる準備ができました。まだ先は長いです。<br/>
でもげっそりしないで下さいね。<br/>
ひとつひとつは大した事じゃないです。うまくいけば・・・</p>

<h3 id="gcc_install">GCCのインストール </h3>


<p>オイラがインストールを試した中で、一番のポイントは、このGCCでした。<br/>
公式サイトにも載ってない落とし穴なので、注意して読んで下さい。<br/>
シチュエーション別に解説します。</p>

<hr />

<h4>1. Macの方</h4>

<p>また質問ですが、あなたのOSはLionですか？ <br/>
Noの方は、ここでは何もしなくていいです。RVMのインストールに進みます。</p>

<p>Yesの方は、ここ（→<a href="https://github.com/downloads/kennethreitz/osx-gcc-installer/GCC-10.7-v2.pkg">GCC-10.7.pkg</a> ）からインストーラをダウンロードして実行します。</p>

<p>そして環境変数CCをシェルのプロファイルに書き込みます。<br/>
例によって、どちらのシェルを使っているかで、手順が分かれます。</p>

<hr />

<h4>bashの方＋なんだか分からない方</h4>

<p><code>export CC=/usr/bin/gcc-4.2</code>を、~/.bash_profileに追記し（ファイルがなければ作る）、ターミナルを再起動します。<br/>
こんなふうにコマンドで打つと、勝手にファイルを開くか作って書いてくれます。</p>

<pre><code>echo "export CC=/usr/bin/gcc-4.2" &gt;&gt; ~/.bash_profile
</code></pre>

<h5>zshの方</h5>

<p>zshの方は、ファイル名が違います。<br/>
<code>export CC=/usr/bin/gcc-4.2</code>を、<code>~/.zprofile</code>に追記してください。</p>

<h5>参考資料：</h5>

<p><a href="http://d.hatena.ne.jp/holypp/20120212/1328992440">MacOSX LionでのRubyの扱い方、またはllvm-gccについて</a><br/>
<a href="https://gist.github.com/1104557">FIX for Lion&#8217;s posix_spawn_ext.bundle: [BUG] Segmentation fault</a></p>

<hr />

<h4>Ubuntuの方</h4>

<p>UbuntuではGCCが入ってないので、build-essentialというライブラリをapt-getして下さい。<br/>
詳しくはリンク先：thincaさんのページを参照。</p>

<h5>参考資料：</h5>

<p><a href="http://thira.plavox.info/blog/2008/10/ubuntu_gcc_buildessential.html">Ubuntu のデフォルトでは gcc でコンパイルできないので build-essential を入れておく</a></p>

<p>詳しくないので、その他のディストリビューションの事はわかりません。</p>

<hr />

<h2>Rubyのインストール</h2>

<p>やっとここまで来ました。
ここからは、手順としてはもう少しです。
PCに頑張ってもらう感じになります。</p>

<p>Rubyをインストールします。
今回必要なライブラリは1.9.2です。
新し過ぎても面倒がある感じなので、スバリ1.9.2そのものをおすすめします。</p>

<pre><code>rvm install 1.9.2 &amp;&amp; rvm use 1.9.2
rvm rubygems latest
</code></pre>

<p>このコマンドで、Rubyのソースコードをダウンロードしながら、<br/>
自動的にコンパイルします。ここでさっきのGCCを使うんです。<br/>
けっこう時間がかかります。</p>

<h2>Gitのインストール</h2>

<p>Gitのインストールは、<code>brew install git</code>とかやってください。
Ubuntuの方は、<code>sudo apt-get install git-core</code>です。</p>

<h5>参考資料：</h5>

<p><a href="http://d.hatena.ne.jp/STAR_ZERO/20110815/1313416152">MacにHomebrewをインストールする（ついでにGitも</a>
<a href="http://blog.champierre.com/670">せっかちな人のための git 入門 – githubt をインストールし、共同で開発できる環境を整えるまで : 僕は発展途上技術者</a>
<a href="http://weble.org/2011/02/14/git-mac-install">最速で Git を Mac にインストールして基本的なコマンドを使う方法</a></p>

<hr />

<h2>次回</h2>

<p><a href="http://satrex.github.com/blog/2012/04/23/installed-octopress-002/">次回</a>は、いよいよOctopressをインストールします。</p>
]]></content>
  </entry>
  
</feed>
